import math
from Poly_Gen import poly_gen

"""
Differentiation

Definition - Differentiation is a method used to compute the rate of change of a function f(x) with respect to its input x

Equation - d/dx[f(x)] = f'(x) = lim(h->0) [f(x+h) - f(x)]/h
         - d/dx[x^n] = nx^(n-1)

This is a function that will differentiate polynomials generated by the Poly_gen function 

Input -> polynomial 1x^4 + 3x^3 + 2x^2 + x + 1 = 0

output -> 4x^3 + 9x^2 + 4x + 1 = 0

///////////////////////////////////////
Plan 

- All coefficients and powers will be stored in an array
- The signs will be stored in a seperate array
- The new coefficients will be calculated by multiplying the powers with thier respective coefficients
- The new powers will be calculated by subtracting 1 from the current power 
- Constants will go to 0 therefore will not be considered
- The new polynomial will be reconstructed and returned

"""

def poly_diff(polynomial):

    # Splits the inital polynomial string into seperate strings
    polynomial = polynomial.split()
    #print('polynomial', polynomial)

    # Collects all the coefficients into an array
    coefficients = [x[0] for x in polynomial if len(x) == 4]
    #print('coefficients', coefficients)

    # Collects all powers into an array
    powers = [x[3] for x in polynomial if len(x) == 4]
    #print('powers', powers)

    # Collects all signs in equation
    signs = [x for x in polynomial if x == '+' or x == '-']
    #print('signs', signs)

    # Checks for any constants in the polynomial and removes the last sign as the constant will differentiate to 0
    for i in polynomial:
        if i.isnumeric() and i != '0':
            signs = signs[:-1]

    #print('signs', signs)

    new_coefficients = []

    # Calculates new coefficients by multiplying the old coefficients with the powers
    for i in range(len(coefficients)):
        new_co = int(coefficients[i]) * int(powers[i])
        new_coefficients.append(new_co)

    #print('new_coefficients', new_coefficients)

    # Calculates new powers by subtracting 1 from the current power
    new_powers = [int(x)-1 for x in powers]
    #print('new_powers', new_powers)

    # Initalises varable to hold differentiated terms
    deriv = ''

    # Concatenates the new coefficients and powers into a new polynomial
    for i in range(len(coefficients)):
        co_add = f"{str(new_coefficients[i])}" + 'x'
        #print('co_add', co_add)

        power_add = f"{str(new_powers[i])}"
        #print('power_add', power_add)

        # This is to format the terms correctly eg 6x^1 -> 6x and 4x^0 -> 4
        if power_add == '0':
            new_poly = co_add[:-1] 

        elif power_add == '1':
            new_poly = co_add
        
        else:
            new_poly = co_add + "^" + power_add
            #print('new_poly', new_poly)


        deriv += ' ' + new_poly

    deriv = deriv.split()

    #print('deriv', deriv)

    derivative = ''

    # Constructs the differentiated polynomial by joining all terms with the correct operation  
    for i in range(len(deriv)):
        try:
            term = deriv[i] + " " + signs[i]
            derivative +=  " " + term
        except(IndexError):
             derivative +=  " " + deriv[i]
        #print(term)

    # The derivative of any single variable is 1
    for i in polynomial:
        if i == 'x':
            derivative += " " + '1'
    

    derivative += " " + polynomial[-2] + " " + polynomial[-1] 
    print('derivative', derivative)

    return derivative


polynomial = poly_gen()
poly_diff(polynomial)